datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Order {
  id          String         @id @default(cuid())
  address     String
  distance    Float
  status      DeliveryStatus @default(PLACED)
  coordinates Float[] // [longitude, latitude]
  items       Item[]
}

model Item {
  id        String @id @default(cuid())
  item      String
  amount    Int
  weight    Int
  price     Float
  orderBy   Order  @relation(fields: [orderById], references: [id], onDelete: Cascade)
  orderById String
}

// Main Table
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  deliveries    Deliver[]
}

model Deliver {
  orderId      String @id
  deliveryBy   User   @relation(fields: [deliveryById], references: [id], onDelete: Cascade)
  deliveryById String
}

// Next Auth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DeliveryStatus {
  PLACED
  CONFIRMED
  DISPATCHED
  DELIVERED
  CANCELLED
}
