datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingDelivery {
  ordersId  String  @id @default(cuid())
  orders    Order[]
  handler   User    @relation(name: "UserToPendingDelivery", fields: [handlerId], references: [id])
  handlerId String  @unique
}

model Order {
  id              String           @id @default(cuid())
  orderId         Int              @default(autoincrement())
  address         String
  distance        Float
  status          DeliveryStatus   @default(PLACED)
  coordinates     Float[] // [longitude, latitude]
  items           Item[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  handler         User?            @relation(fields: [handlerId], references: [id])
  handlerId       String?
  orderGroupId    String?
  pendingDelivery PendingDelivery? @relation(fields: [orderGroupId], references: [ordersId])
}

model Item {
  id        String @id @default(cuid())
  item      String
  amount    Int
  weight    Int
  price     Float
  image     String
  orderBy   Order  @relation(fields: [orderById], references: [id], onDelete: Cascade)
  orderById String
}

// Main Table
model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  maxWeight       Int              @default(10) // in kg
  accounts        Account[]
  sessions        Session[]
  deliveries      Order[]
  pendingDelivery PendingDelivery? @relation(name: "UserToPendingDelivery")
}

// Next Auth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DeliveryStatus {
  PLACED
  CONFIRMED
  DISPATCHED
  DELIVERED
  CANCELLED
}
